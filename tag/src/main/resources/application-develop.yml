server:
  port: 14001

eureka:
  #  instance:
  #    #    hostname: ${DEVELOP_EUREKA_HOSTNAME}
  #    hostname: localhost
  #    prefer-ip-address: false
  #    instance-id: ${spring.application.name}:${server.port}
  #    appname: ${spring.application.name}
  client:
    register-with-eureka: true
    fetch-registry: true

spring:
  #  config:
  #    import:
  #      - file:.env.tag[.properties]
  datasource:
    #    url: ${DEVELOP_DB_URL}
    url: jdbc:mysql://localhost:3306/newpick4u
    #    username: ${DEVELOP_DB_USERNAME}
    username: usernewpick4u
    #    password: ${DEVELOP_DB_PASSWORD}
    password: usernewpick4u
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    open-in-view: false
    defer-datasource-initialization: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        default_batch_fetch_size: 100
        format_sql: true
  kafka:
    tag-topic:
      topic-name: tag.fct.v1
    dlq-topic:
      topic-name: dev.tag.fct.dql.v1
    #    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    bootstrap-servers: localhost:9092
    #    producer:
    #      key-serializer: org.apache.kafka.common.serialization.StringSerializer
    #      value-serializer: org.apache.kafka.common.serialization.StringSerializer

    
    consumer:
      create:
        #        group-id: ${KAFKA_CREATE_GROUP_ID}
        group-id: tag-create-consumer
      delete:
        #        group-id: ${KAFKA_DELETE_GROUP_ID}
        group-id: tag-delete-consumer
      topic:
        #        create: "${CREATE_TAG_TOPIC}"
        create: tag-info.fct.v1
        #        delete: "${DELETE_TAG_TOPIC}"
        delete: tag-info.del.v1
    #      auto-offset-reset: earliest
    #      max-poll-records: 20 # 한번에 가져오는 메세지 수
    #      max-poll-interval-ms: 15000 # 지정한 시간 넘게 poll() 호출 안하면 리밸런싱 발생
    #      heartbeat-interval-ms: 1000 # 카프카 컨슈머가 살아있다고 주기적으로 브로커에게 응답을 보내는 간격
    #      session-timeout-ms: 60000 # 브로커가 이 시간동안 응답을 못받으면 해당 컨슈머가 죽었다고 판단 ㅠ -> 파티션 리벨런싱
    #      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

#    listener:
#      ack-mode: manual_immediate # 수동 커밋, acknowledgment.acknowledge()로 수동 커밋

